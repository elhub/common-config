/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package no.elhub.common.konfig

import no.elhub.common.konfig.sources.PropertySource
import java.time.Duration
import java.util.Properties

abstract class Configurable(private val sources: Array<PropertySource>) {

    @PublishedApi
    internal val properties = Properties()

    init {
        sources.reverse()
        loadProperties()
    }

    private fun loadProperties() {
        sources.forEach {
            it.load(properties)
        }
    }

    /**
     * Look up a property value identified by [key], or throw [KonfigException] if there is no definition of the
     * property.
     */
    @Throws(KonfigException::class)
    inline operator fun <reified T> get(key: String): T = property<T>(key)

    operator fun contains(key: String) = properties.containsKey(key)

    inline fun <reified T> property(key: String): T = when (T::class) {
        Boolean::class ->  properties.getProperty(key).toBoolean() as T? ?: throw KonfigException("Missing property value $key")
        Duration::class ->  Duration.parse(properties.getProperty(key)) as T? ?: throw KonfigException("Missing property value $key")
        Int::class ->  properties.getProperty(key).toInt() as T? ?: throw KonfigException("Missing property value $key")
        String::class -> properties.getProperty(key) as T? ?: throw KonfigException("Missing property value $key")
        else -> throw KonfigException("Wrong type")
    }

}
